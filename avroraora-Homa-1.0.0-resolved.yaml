openapi: 3.0.3
info:
  title: Homa API
  description: API для регистрации, авторизации и получения офферов недвижимости
  version: 1.0.1

servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/avroraora/Homa/1.0.0
  - url: http://localhost:8080/api/v1

paths:
  /register:
    post:
      summary: Регистрация пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: secret123$A
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$'
      responses:
        "201":
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: user@example.com
        "400":
          description: Неверный запрос
        "409":
          description: Пользователь уже существует
        "500":
          description: Внутренняя ошибка сервера

  /login:
    post:
      summary: Авторизация пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: VictoriyaSecret123
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$'
                  minLength: 6
      responses:
        "200":
          description: Успешная авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: user@example.com
        "401":
          description: Неверный email или пароль
        "400":
          description: Неверный запрос
        "500":
          description: Внутренняя ошибка сервера

  /logout:
    post:
      summary: Разлогиниться (инвалидировать токен)
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Успешный выход из системы
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Вы успешно вышли из системы"
        "401":
          description: Неавторизован (нет или неверный токен)
        "500":
          description: Внутренняя ошибка сервера

  /offers:
    get:
      summary: Получить список офферов недвижимости
      tags:
        - Offers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список офферов недвижимости
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    user_id:
                      type: integer
                      example: 1
                    location_id:
                      type: integer
                      example: 2
                    category_id:
                      type: integer
                      example: 2
                    title:
                      type: string
                      example: "Квартира в апартаментах"
                    description:
                      type: string
                      example: "Соседи алкаши"
                    price:
                      type: integer
                      example: 500
                    area:
                      type: integer
                      example: 100
                    rooms:
                      type: integer
                      example: 3
                    address:
                      type: string
                      example: "Улица Пушкина, дом Колотушкина"
                    offer_type:
                      type: string
                      example: "Срочный"
                    created_at:
                      type: string
                      format: date-time
                      example: "2024-01-15T10:30:00Z"
                    updated_at:
                      type: string
                      format: date-time
                      example: "2024-01-15T10:30:00Z"
        "401":
          description: Неавторизован
        "500":
          description: Внутренняя ошибка сервера

  /image/{filename}:
    get:
      summary: Получить изображение
      tags:
        - Media
      parameters:
        - name: filename
          in: path
          required: true
          description: Имя файла изображения
          schema:
            type: string
            example: "house1.jpg"
      responses:
        "200":
          description: Успешно (возвращает файл изображения)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Файл не найден
        "500":
          description: Внутренняя ошибка сервера

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
